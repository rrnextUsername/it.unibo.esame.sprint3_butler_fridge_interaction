/* Generated by AN DISI Unibo */ 
package it.unibo.butler

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Butler ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		var sync = false
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						solve("consult('sysRules.pl')","") //set resVar	
						solve("consult('butlerModel.pl')","") //set resVar	
						solve("consult('test.pl')","") //set resVar	
						solve("showResourceModel","") //set resVar	
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
						itunibo.butler.butlerResourceModelSupport.updateModelState(myself ,"waitCmd" )
						solve("showResourceModel","") //set resVar	
					}
					 transition(edgeName="t02",targetState="solveCmd",cond=whenDispatch("cmd"))
				}	 
				state("solveCmd") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("cmd(CMD,ARG1)"), Term.createTerm("cmd(CMD,ARG1)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
								itunibo.butler.butlerResourceModelSupport.updateModelState(myself ,"solveCmd" )
								solve("retract(currentCmd(_,_))","") //set resVar	
								solve("assert(currentCmd(${payloadArg(0)},${payloadArg(1)}))","") //set resVar	
								solve("comando(${payloadArg(0)},${payloadArg(1)})","") //set resVar	
						}
					}
					 transition( edgeName="goto",targetState="solveAction", cond=doswitch() )
				}	 
				state("solveAction") { //this:State
					action { //it:State
						itunibo.butler.butlerResourceModelSupport.updateModelState(myself ,"solveAction" )
						solve("retract(azione(ARG0,ARG1,ARG2,ARG3))","") //set resVar	
						if(currentSolution.isSuccess()){ val Azione= currentSolution.getVarValue("ARG0").toString()
						if(Azione=="querySync"){ val Food= currentSolution.getVarValue("ARG1").toString()
						sync = true
						forward("queryPresence", "queryPresence(cibo,$Food)" ,"butler" ) 
						 }
						if(Azione=="queryAsync"){ val Food= currentSolution.getVarValue("ARG1").toString()
						sync = false
						forward("queryPresence", "queryPresence(cibo,$Food)" ,"butler" ) 
						 }
						if(Azione=="check"){ val Number= currentSolution.getVarValue("ARG1").toString()
						forward("check", "check($Number)" ,"butler" ) 
						 }
						 }
						else
						 { forward("done", "done" ,"butler" ) 
						  }
					}
					 transition(edgeName="t03",targetState="waitCmd",cond=whenDispatch("done"))
					transition(edgeName="t04",targetState="azioneQuerySync",cond=whenDispatchGuarded("queryPresence",{sync}))
					transition(edgeName="t05",targetState="azioneQueryASync",cond=whenDispatchGuarded("queryPresence",{!sync}))
					transition(edgeName="t06",targetState="azioneCheck",cond=whenDispatch("check"))
					transition(edgeName="t07",targetState="stoppedSolvedAction",cond=whenEvent("stopAppl"))
				}	 
				state("azioneCheck") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("check(NUMBER)"), Term.createTerm("check(NUMBER)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								itunibo.butler.butlerResourceModelSupport.updateModelState(myself ,"azioneCheck" )
								solve("showResourceModel","") //set resVar	
								solve("assert(done(check,${payloadArg(0)}))","") //set resVar	
						}
					}
					 transition( edgeName="goto",targetState="solveAction", cond=doswitch() )
				}	 
				state("azioneQuerySync") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("queryPresence(CATEGORY,NAME)"), Term.createTerm("queryPresence(cibo,FOOD)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
								itunibo.butler.butlerResourceModelSupport.updateModelState(myself ,"azioneQuerySync" )
								solve("showResourceModel","") //set resVar	
								solve("assert(done(querySync,${payloadArg(1)}))","") //set resVar	
								forward("queryPresence", "queryPresence(cibo,${payloadArg(1)})" ,"fridge_dummy" ) 
						}
					}
					 transition(edgeName="t08",targetState="handleReply",cond=whenDispatch("replyPresence"))
					transition(edgeName="t09",targetState="stoppedWaitingReply",cond=whenEvent("stopAppl"))
				}	 
				state("azioneQueryASync") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("queryPresence(CATEGORY,NAME)"), Term.createTerm("queryPresence(cibo,FOOD)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
								itunibo.butler.butlerResourceModelSupport.updateModelState(myself ,"azioneQueryAsync" )
								solve("showResourceModel","") //set resVar	
								solve("assert(done(queryAsync,${payloadArg(1)}))","") //set resVar	
						}
					}
					 transition( edgeName="goto",targetState="solveAction", cond=doswitch() )
				}	 
				state("handleReply") { //this:State
					action { //it:State
						solve("currentCmd(addFood,CIBO)","") //set resVar	
						val Cibo=currentSolution.getVarValue("CIBO")
						if( checkMsgContent( Term.createTerm("replyPresence(STATUS)"), Term.createTerm("replyPresence(present)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("cmd", "cmd(successAddFood,$Cibo)" ,"butler" ) 
						}
						if( checkMsgContent( Term.createTerm("replyPresence(STATUS)"), Term.createTerm("replyPresence(absent)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								emit("missingFood", "missingFood($Cibo)" ) 
						}
					}
					 transition( edgeName="goto",targetState="solveAction", cond=doswitch() )
				}	 
				state("stoppedSolvedAction") { //this:State
					action { //it:State
						itunibo.butler.butlerResourceModelSupport.updateModelState(myself ,"stoppedSolvedAction" )
						println("$name in ${currentState.stateName} | $currentMsg")
						solve("showResourceModel","") //set resVar	
					}
					 transition(edgeName="t010",targetState="restartSolvedAction",cond=whenEvent("reactivateAppl"))
				}	 
				state("restartSolvedAction") { //this:State
					action { //it:State
						solve("assert(done(restartSolvedAction))","") //set resVar	
						println("$name in ${currentState.stateName} | $currentMsg")
						solve("showResourceModel","") //set resVar	
					}
					 transition(edgeName="t011",targetState="waitCmd",cond=whenDispatch("done"))
					transition(edgeName="t012",targetState="azioneQuerySync",cond=whenDispatch("queryPresence"))
					transition(edgeName="t013",targetState="stoppedSolvedAction",cond=whenEvent("stopAppl"))
				}	 
				state("stoppedWaitingReply") { //this:State
					action { //it:State
						itunibo.butler.butlerResourceModelSupport.updateModelState(myself ,"stoppedWaitingReply" )
						println("$name in ${currentState.stateName} | $currentMsg")
						solve("showResourceModel","") //set resVar	
					}
					 transition(edgeName="t014",targetState="restartWaitingReply",cond=whenEvent("reactivateAppl"))
				}	 
				state("restartWaitingReply") { //this:State
					action { //it:State
						solve("assert(done(restartSolvedAction))","") //set resVar	
						println("$name in ${currentState.stateName} | $currentMsg")
						solve("showResourceModel","") //set resVar	
					}
					 transition(edgeName="t015",targetState="handleReply",cond=whenDispatch("replyPresence"))
				}	 
			}
		}
}
